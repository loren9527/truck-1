<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="test.com.bysj.rj.dao.WorkshopEntityMapper" >
  <resultMap id="BaseResultMap" type="test.com.bysj.rj.entity.WorkshopEntity" >
    <id column="work_id" property="workId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="work_state" property="workState" jdbcType="TINYINT" />
    <result column="health" property="health" jdbcType="TINYINT" />
    <result column="dp_id" property="dpId" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    work_id, name, address, work_state, health, dp_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="test.com.bysj.rj.entity.WorkshopEntityExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from workshop
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from workshop
    where work_id = #{workId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from workshop
    where work_id = #{workId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="test.com.bysj.rj.entity.WorkshopEntityExample" >
    delete from workshop
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="test.com.bysj.rj.entity.WorkshopEntity" >
    insert into workshop (work_id, name, address, 
      work_state, health, dp_id
      )
    values (#{workId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, 
      #{workState,jdbcType=TINYINT}, #{health,jdbcType=TINYINT}, #{dpId,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="test.com.bysj.rj.entity.WorkshopEntity" >
    insert into workshop
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="workId != null" >
        work_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="workState != null" >
        work_state,
      </if>
      <if test="health != null" >
        health,
      </if>
      <if test="dpId != null" >
        dp_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="workId != null" >
        #{workId,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="workState != null" >
        #{workState,jdbcType=TINYINT},
      </if>
      <if test="health != null" >
        #{health,jdbcType=TINYINT},
      </if>
      <if test="dpId != null" >
        #{dpId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="test.com.bysj.rj.entity.WorkshopEntityExample" resultType="java.lang.Integer" >
    select count(*) from workshop
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update workshop
    <set >
      <if test="record.workId != null" >
        work_id = #{record.workId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null" >
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.workState != null" >
        work_state = #{record.workState,jdbcType=TINYINT},
      </if>
      <if test="record.health != null" >
        health = #{record.health,jdbcType=TINYINT},
      </if>
      <if test="record.dpId != null" >
        dp_id = #{record.dpId,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update workshop
    set work_id = #{record.workId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      work_state = #{record.workState,jdbcType=TINYINT},
      health = #{record.health,jdbcType=TINYINT},
      dp_id = #{record.dpId,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="test.com.bysj.rj.entity.WorkshopEntity" >
    update workshop
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="workState != null" >
        work_state = #{workState,jdbcType=TINYINT},
      </if>
      <if test="health != null" >
        health = #{health,jdbcType=TINYINT},
      </if>
      <if test="dpId != null" >
        dp_id = #{dpId,jdbcType=BIGINT},
      </if>
    </set>
    where work_id = #{workId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="test.com.bysj.rj.entity.WorkshopEntity" >
    update workshop
    set name = #{name,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      work_state = #{workState,jdbcType=TINYINT},
      health = #{health,jdbcType=TINYINT},
      dp_id = #{dpId,jdbcType=BIGINT}
    where work_id = #{workId,jdbcType=INTEGER}
  </update>
</mapper>